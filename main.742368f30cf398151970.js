!function(){"use strict";var t={838:function(t,e,n){n.r(e)},282:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.Canvas=void 0;var n=function(){function t(t){if(this.element=t,this.config={backgroundColor:"#000000",fillColor:"#ffffff",strokeColor:"#ffffff"},!t)throw new Error("Canvas element is not defined");this.ctx=t.getContext("2d")}return t.prototype.setSize=function(t,e){this.element.width=t,this.element.height=e},t.prototype.clear=function(){this.ctx.save(),this.ctx.fillStyle=this.config.backgroundColor,this.ctx.clearRect(0,0,this.element.width,this.element.height),this.ctx.fillRect(0,0,this.element.width,this.element.height),this.ctx.restore()},t.prototype.circle=function(t,e,n,i){void 0===i&&(i=this.config.fillColor),this.ctx.save(),this.ctx.fillStyle=i,this.ctx.beginPath(),this.ctx.arc(t,e,n,0,2*Math.PI),this.ctx.fill(),this.ctx.restore()},t.prototype.line=function(t,e,n,i,o){void 0===o&&(o=this.config.strokeColor),this.ctx.save(),this.ctx.strokeStyle=o,this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(n,i),this.ctx.stroke(),this.ctx.restore()},Object.defineProperty(t.prototype,"width",{get:function(){return this.element.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.element.height},enumerable:!1,configurable:!0}),t}();e.Canvas=n},193:function(t,e,n){var i=this&&this.__createBinding||(Object.create?function(t,e,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,i,o)}:function(t,e,n,i){void 0===i&&(i=n),t[i]=e[n]}),o=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||i(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),o(n(282),e)},128:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.Colour=void 0;var n=function(){function t(t,e,n,i){void 0===i&&(i=1),this.r=t,this.g=e,this.b=n,this.a=i}return t.fromHex=function(e){return new t(parseInt(e.substring(1,3),16),parseInt(e.substring(3,5),16),parseInt(e.substring(5,7),16))},t.fromRGB=function(e,n,i){return new t(e,n,i)},t.prototype.toHex=function(){return"#".concat(this.r.toString(16).padStart(2,"0")).concat(this.g.toString(16).padStart(2,"0")).concat(this.b.toString(16).padStart(2,"0"))},t.prototype.toRGB=function(){return"rgb(".concat(this.r,", ").concat(this.g,", ").concat(this.b,")")},t.prototype.toRGBA=function(){return"rgba(".concat(this.r,", ").concat(this.g,", ").concat(this.b,", ").concat(this.a,")")},t.prototype.toHexWithAlpha=function(){return"#".concat(this.r.toString(16).padStart(2,"0")).concat(this.g.toString(16).padStart(2,"0")).concat(this.b.toString(16).padStart(2,"0")).concat(Math.round(255*this.a).toString(16).padStart(2,"0"))},t.prototype.clone=function(){return new t(this.r,this.g,this.b,this.a)},t.prototype.setAlpha=function(t){return this.a=t,this},t}();e.Colour=n},52:function(t,e,n){var i=this&&this.__createBinding||(Object.create?function(t,e,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,i,o)}:function(t,e,n,i){void 0===i&&(i=n),t[i]=e[n]}),o=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||i(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),o(n(128),e)},956:function(t,e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.Game=void 0;var i=n(52),o=n(213),r=n(562),s=n(244),a=function(){function t(t,e){var n=this;this.canvas=t,this.settings=e,this.objects=[],this.G=667408e-16,this.scale=1495978707,this.isClicking=!1,t.element.addEventListener("mousedown",(function(t){n.isClicking=!0,n.clickStart={x:t.clientX,y:t.clientY}})),t.element.addEventListener("mouseup",(function(t){n.isClicking&&(t.ctrlKey||t.metaKey?n.objects.push(new r.Sun({position:new s.Vector(t.clientX,t.clientY),velocity:new s.Vector(0,0),acceleration:new s.Vector(0,0),canvas:n.canvas,radius:e.sunRadius,mass:e.sunMass,color:e.sunColour},n.settings)):n.objects.push(new o.Planet({position:new s.Vector(t.clientX,t.clientY),velocity:new s.Vector((t.clientX-n.clickStart.x)/20,(t.clientY-n.clickStart.y)/20),acceleration:new s.Vector(0,0),canvas:n.canvas,radius:e.planetRadius,mass:e.planetMass,color:e.planetColour},n.settings)),n.isClicking=!1)}))}return t.prototype.init=function(){},t.prototype.run=function(){var t=this;this.canvas.clear();for(var e=0;e<this.objects.length;e++){this.objects[e].acceleration=new s.Vector(0,0);for(var n=new s.Vector(0,0),i=0;i<this.objects.length;i++)if(e!==i){var o=this.calculateForce(this.objects[e],this.objects[i]);n=s.Vector.add(n,o)}this.objects[e].update(n),this.checkOutOfBounds(this.objects[e])||this.objects[e].draw()}this.drawGravityVisualisation(),window.requestAnimationFrame((function(){return t.run()}))},t.prototype.calculateForce=function(t,e){var n=s.Vector.subtract(t.position,e.position),i=s.Vector.magnitude(n)*this.scale;return s.Vector.multiply(n,this.G*t.mass*e.mass/(i*i)).multiply(-1)},t.prototype.checkOutOfBounds=function(t){return(t.position.x<0||t.position.x>this.canvas.width||t.position.y<0||t.position.y>this.canvas.height)&&(this.objects.splice(this.objects.indexOf(t),1),!0)},t.prototype.drawGravityVisualisation=function(){if(this.settings.displayGravityVisualisation)for(var t=this.canvas,e=t.width,n=t.height,r=0;r<=e;r+=20)for(var a=0;a<=n;a+=20){for(var c=new s.Vector(0,0),u=0;u<this.objects.length;u++){var l=this.calculateForce(this.objects[u],new o.Planet({position:new s.Vector(r,a),velocity:new s.Vector(0,0),acceleration:new s.Vector(0,0),canvas:this.canvas,radius:1,mass:1,color:new i.Colour(0,0,0)},this.settings));c=s.Vector.add(c,l)}c.magnitude()>1e-4&&this.canvas.circle(r,a,Math.min(Math.ceil(1e4*s.Vector.magnitude(c))/1e4,5),"rgba(255,255,255,0.5)")}},t.prototype.clear=function(){this.objects=[]},t}();e.Game=a},48:function(t,e,n){var i=this&&this.__createBinding||(Object.create?function(t,e,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,i,o)}:function(t,e,n,i){void 0===i&&(i=n),t[i]=e[n]}),o=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||i(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),o(n(956),e)},961:function(t,e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.SettingsManager=void 0;var i=n(52);e.SettingsManager=function(t){var e=this;this.planetMass=1e24,this.planetRadius=10,this.planetColour=new i.Colour(255,0,0),this.sunMass=1e30,this.sunRadius=40,this.sunColour=new i.Colour(255,255,0),this.displayGravityVisualisation=!1,this.displayForceVector=!1,this.displayTrail=!1,t.planetMassRangeInput.addEventListener("input",(function(n){e.planetMass=Math.pow(10,n.target.valueAsNumber),t.planetMassValue.innerText=e.planetMass.toPrecision(2)})),t.planetRadiusRangeInput.addEventListener("input",(function(n){e.planetRadius=n.target.valueAsNumber,t.planetRadiusValue.innerText=e.planetRadius.toString()})),t.planetColourInput.addEventListener("input",(function(t){e.planetColour=i.Colour.fromHex(t.target.value)})),t.sunMassRangeInput.addEventListener("input",(function(n){e.sunMass=Math.pow(10,n.target.valueAsNumber),t.sunMassValue.innerText=e.sunMass.toPrecision(2)})),t.sunRadiusRangeInput.addEventListener("input",(function(n){e.sunRadius=n.target.valueAsNumber,t.sunRadiusValue.innerText=e.sunRadius.toString()})),t.sunColourInput.addEventListener("input",(function(t){e.sunColour=i.Colour.fromHex(t.target.value)})),t.displayGravityVisualisationInput.addEventListener("change",(function(t){e.displayGravityVisualisation=t.target.checked})),t.displayForceVectorInput.addEventListener("change",(function(t){e.displayForceVector=t.target.checked})),t.displayTrailInput.addEventListener("change",(function(t){e.displayTrail=t.target.checked}))}},614:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.GameObject=void 0;e.GameObject=function(t,e){this.settings=e,Object.assign(this,t)}},213:function(t,e,n){var i=this&&this.__createBinding||(Object.create?function(t,e,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,i,o)}:function(t,e,n,i){void 0===i&&(i=n),t[i]=e[n]}),o=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||i(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),o(n(710),e)},710:function(t,e,n){var i,o=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Planet=void 0;var r=n(244),s=function(t){function e(e,n){var i=t.call(this,e,n)||this;return i.trail=[],i.currentForce=new r.Vector(0,0),i}return o(e,t),e.prototype.update=function(t){this.currentForce=t.divide(this.mass).multiply(500),this.acceleration=t.divide(this.mass),this.updateTrail(),this.velocity=r.Vector.add(this.velocity,this.acceleration),this.position=r.Vector.add(this.position,this.velocity)},e.prototype.draw=function(){this.canvas.circle(this.position.x,this.position.y,this.radius,this.color.toHex()),this.drawTrail(),this.drawForceVector()},e.prototype.drawTrail=function(){var t=this;if(this.settings.displayTrail){var e=this.color.clone().setAlpha(.1);this.trail.forEach((function(n){t.canvas.circle(n.x,n.y,1,e.toHex())}))}},e.prototype.drawForceVector=function(){if(this.settings.displayForceVector){var t=this.color.clone().setAlpha(.5);this.canvas.line(this.position.x,this.position.y,this.position.x+this.currentForce.x,this.position.y+this.currentForce.y,t.toHex())}},e.prototype.updateTrail=function(){this.settings.displayTrail&&(this.trail.push(r.Vector.clone(this.position)),this.trail.length>50&&this.trail.shift())},e}(n(614).GameObject);e.Planet=s},562:function(t,e,n){var i,o=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Sun=void 0;var r=n(244),s=function(t){function e(e,n){return t.call(this,e,n)||this}return o(e,t),e.prototype.update=function(t){this.acceleration=t.divide(this.mass),this.velocity=r.Vector.add(this.velocity,this.acceleration),this.position=r.Vector.add(this.position,this.velocity)},e.prototype.draw=function(){this.canvas.circle(this.position.x,this.position.y,this.radius,this.color.toHex())},e}(n(614).GameObject);e.Sun=s},73:function(t,e,n){var i=this&&this.__createBinding||(Object.create?function(t,e,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,i,o)}:function(t,e,n,i){void 0===i&&(i=n),t[i]=e[n]}),o=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||i(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),o(n(193),e),o(n(244),e),o(n(213),e),o(n(48),e)},244:function(t,e,n){var i=this&&this.__createBinding||(Object.create?function(t,e,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,i,o)}:function(t,e,n,i){void 0===i&&(i=n),t[i]=e[n]}),o=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||i(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),o(n(589),e)},589:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.Vector=void 0;var n=function(){function t(t,e){"object"==typeof t?(this.x=t.x,this.y=t.y):(this.x=t,this.y=e)}return t.clone=function(e){return new t(e.x,e.y)},t.add=function(e,n){return new t(e.x+n.x,e.y+n.y)},t.subtract=function(e,n){return new t(e.x-n.x,e.y-n.y)},t.multiply=function(e,n){return new t(e.x*n,e.y*n)},t.divide=function(e,n){return new t(e.x/n,e.y/n)},t.dot=function(t,e){return t.x*e.x+t.y*e.y},t.magnitude=function(t){return Math.sqrt(t.x*t.x+t.y*t.y)},t.normalize=function(e){return t.divide(e,t.magnitude(e))},t.rotate=function(e,n){return new t(e.x*Math.cos(n)-e.y*Math.sin(n),e.x*Math.sin(n)+e.y*Math.cos(n))},t.rotateDeg=function(e,n){return t.rotate(e,n*Math.PI/180)},t.angle=function(t){return Math.atan2(t.y,t.x)},t.angleDeg=function(e){return 180*t.angle(e)/Math.PI},t.angleBetween=function(e,n){return t.dot(e,n)/(e.magnitude()*n.magnitude())},t.angleBetweenDeg=function(e,n){return 180*t.angleBetween(e,n)/Math.PI},t.prototype.add=function(e){return t.add(this,e)},t.prototype.subtract=function(e){return t.subtract(this,e)},t.prototype.multiply=function(e){return t.multiply(this,e)},t.prototype.divide=function(e){return t.divide(this,e)},t.prototype.dot=function(e){return t.dot(this,e)},t.prototype.magnitude=function(){return t.magnitude(this)},t.prototype.normalize=function(){return t.normalize(this)},t.prototype.rotate=function(e){return t.rotate(this,e)},t.prototype.rotateDeg=function(e){return t.rotateDeg(this,e)},t}();e.Vector=n}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={exports:{}};return t[i].call(r.exports,r,r.exports,n),r.exports}n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},function(){n(838);var t=n(73),e=n(961),i=new t.Canvas(document.getElementById("canvas"));i.setSize(window.innerWidth,window.innerHeight),window.addEventListener("resize",(function(){i.setSize(window.innerWidth,window.innerHeight)})),document.getElementById("game-settings").addEventListener("click",(function(t){t.stopPropagation(),t.stopImmediatePropagation()}));var o=new e.SettingsManager({planetMassRangeInput:document.getElementById("planet-mass"),planetMassValue:document.getElementById("planet-mass-value"),planetRadiusRangeInput:document.getElementById("planet-radius"),planetRadiusValue:document.getElementById("planet-radius-value"),planetColourInput:document.getElementById("planet-colour"),sunMassRangeInput:document.getElementById("sun-mass"),sunMassValue:document.getElementById("sun-mass-value"),sunRadiusRangeInput:document.getElementById("sun-radius"),sunRadiusValue:document.getElementById("sun-radius-value"),sunColourInput:document.getElementById("sun-colour"),displayGravityVisualisationInput:document.getElementById("display-gravity-visualisation"),displayForceVectorInput:document.getElementById("display-force-vector"),displayTrailInput:document.getElementById("display-trail")}),r=new t.Game(i,o);r.init(),r.run(),document.getElementById("clear-button").addEventListener("click",(function(){r.clear()}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,