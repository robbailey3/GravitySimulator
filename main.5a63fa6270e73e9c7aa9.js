!function(){"use strict";var t={838:function(t,e,n){n.r(e)},282:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.Canvas=void 0;var n=function(){function t(t){if(this.element=t,this.config={backgroundColor:"#000000",fillColor:"#ffffff",strokeColor:"#ffffff"},!t)throw new Error("Canvas element is not defined");this.ctx=t.getContext("2d")}return t.prototype.setSize=function(t,e){this.element.width=t,this.element.height=e},t.prototype.clear=function(){this.ctx.save(),this.ctx.fillStyle=this.config.backgroundColor,this.ctx.clearRect(0,0,this.element.width,this.element.height),this.ctx.fillRect(0,0,this.element.width,this.element.height),this.ctx.restore()},t.prototype.circle=function(t,e,n,i){void 0===i&&(i=this.config.fillColor),this.ctx.save(),this.ctx.fillStyle=i,this.ctx.beginPath(),this.ctx.arc(t,e,n,0,2*Math.PI),this.ctx.fill(),this.ctx.restore()},t.prototype.line=function(t,e,n,i,o){void 0===o&&(o=this.config.strokeColor),this.ctx.save(),this.ctx.strokeStyle=o,this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(n,i),this.ctx.stroke(),this.ctx.restore()},Object.defineProperty(t.prototype,"width",{get:function(){return this.element.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.element.height},enumerable:!1,configurable:!0}),t}();e.Canvas=n},193:function(t,e,n){var i=this&&this.__createBinding||(Object.create?function(t,e,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,i,o)}:function(t,e,n,i){void 0===i&&(i=n),t[i]=e[n]}),o=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||i(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),o(n(282),e)},128:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.Colour=void 0;var n=function(){function t(t,e,n,i){void 0===i&&(i=1),this.r=t,this.g=e,this.b=n,this.a=i}return t.fromHex=function(e){return new t(parseInt(e.substring(1,3),16),parseInt(e.substring(3,5),16),parseInt(e.substring(5,7),16))},t.fromRGB=function(e,n,i){return new t(e,n,i)},t.prototype.toHex=function(){return"#".concat(this.r.toString(16).padStart(2,"0")).concat(this.g.toString(16).padStart(2,"0")).concat(this.b.toString(16).padStart(2,"0"))},t.prototype.toRGB=function(){return"rgb(".concat(this.r,", ").concat(this.g,", ").concat(this.b,")")},t.prototype.toRGBA=function(){return"rgba(".concat(this.r,", ").concat(this.g,", ").concat(this.b,", ").concat(this.a,")")},t.prototype.toHexWithAlpha=function(){return"#".concat(this.r.toString(16).padStart(2,"0")).concat(this.g.toString(16).padStart(2,"0")).concat(this.b.toString(16).padStart(2,"0")).concat(Math.round(255*this.a).toString(16).padStart(2,"0"))},t.prototype.clone=function(){return new t(this.r,this.g,this.b,this.a)},t.prototype.setAlpha=function(t){return this.a=t,this},t}();e.Colour=n},52:function(t,e,n){var i=this&&this.__createBinding||(Object.create?function(t,e,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,i,o)}:function(t,e,n,i){void 0===i&&(i=n),t[i]=e[n]}),o=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||i(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),o(n(128),e)},956:function(t,e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.Game=void 0;var i=n(52),o=n(213),r=n(562),a=n(244),s=function(){function t(t,e){var n=this;this.canvas=t,this.settings=e,this.objects=[],this.G=667408e-16,this.scale=1495978707,this.isClicking=!1,t.element.addEventListener("mousedown",(function(t){n.isClicking=!0,n.clickStart={x:t.clientX,y:t.clientY}})),t.element.addEventListener("mouseup",(function(t){n.isClicking&&(t.ctrlKey||t.metaKey?n.objects.push(new r.Sun({position:new a.Vector(t.clientX,t.clientY),velocity:new a.Vector(0,0),acceleration:new a.Vector(0,0),canvas:n.canvas,radius:e.sunRadius,mass:e.sunMass,color:e.sunColour})):n.objects.push(new o.Planet({position:new a.Vector(t.clientX,t.clientY),velocity:new a.Vector((t.clientX-n.clickStart.x)/20,(t.clientY-n.clickStart.y)/20),acceleration:new a.Vector(0,0),canvas:n.canvas,radius:e.planetRadius,mass:e.planetMass,color:e.planetColour,showTrail:e.displayTrail,showForceVector:e.displayForceVector})),n.isClicking=!1)}))}return t.prototype.init=function(){},t.prototype.run=function(){var t=this;this.canvas.clear();for(var e=0;e<this.objects.length;e++){this.objects[e].acceleration=new a.Vector(0,0);for(var n=new a.Vector(0,0),i=0;i<this.objects.length;i++)if(e!==i){var o=this.calculateForce(this.objects[e],this.objects[i]);n=a.Vector.add(n,o)}this.objects[e].update(n),this.checkOutOfBounds(this.objects[e])||this.objects[e].draw()}this.drawGravityVisualisation(),window.requestAnimationFrame((function(){return t.run()}))},t.prototype.calculateForce=function(t,e){var n=a.Vector.subtract(t.position,e.position),i=a.Vector.magnitude(n)*this.scale;return a.Vector.multiply(n,this.G*t.mass*e.mass/(i*i)).multiply(-1)},t.prototype.checkOutOfBounds=function(t){return(t.position.x<0||t.position.x>this.canvas.width||t.position.y<0||t.position.y>this.canvas.height)&&(this.objects.splice(this.objects.indexOf(t),1),!0)},t.prototype.drawGravityVisualisation=function(){if(this.settings.displayGravityVisualisation)for(var t=this.canvas,e=t.width,n=t.height,r=0;r<=e;r+=20)for(var s=0;s<=n;s+=20){for(var c=new a.Vector(0,0),u=0;u<this.objects.length;u++){var l=this.calculateForce(this.objects[u],new o.Planet({position:new a.Vector(r,s),velocity:new a.Vector(0,0),acceleration:new a.Vector(0,0),canvas:this.canvas,radius:1,mass:1,color:new i.Colour(0,0,0),showTrail:!1,showForceVector:!1}));c=a.Vector.add(c,l)}c.magnitude()>1e-4&&this.canvas.circle(r,s,Math.min(Math.ceil(1e4*a.Vector.magnitude(c))/1e4,5),"rgba(255,255,255,0.5)")}},t.prototype.clear=function(){this.objects=[]},t}();e.Game=s},48:function(t,e,n){var i=this&&this.__createBinding||(Object.create?function(t,e,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,i,o)}:function(t,e,n,i){void 0===i&&(i=n),t[i]=e[n]}),o=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||i(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),o(n(956),e)},961:function(t,e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.SettingsManager=void 0;var i=n(52);e.SettingsManager=function(t){var e=this;this.planetMass=1e24,this.planetRadius=10,this.planetColour=new i.Colour(255,0,0),this.sunMass=1e30,this.sunRadius=40,this.sunColour=new i.Colour(255,255,0),this.displayGravityVisualisation=!1,this.displayForceVector=!1,this.displayTrail=!1,t.planetMassRangeInput.addEventListener("input",(function(n){e.planetMass=Math.pow(10,n.target.valueAsNumber),t.planetMassValue.innerText=e.planetMass.toPrecision(2)})),t.planetRadiusRangeInput.addEventListener("input",(function(n){e.planetRadius=n.target.valueAsNumber,t.planetRadiusValue.innerText=e.planetRadius.toString()})),t.planetColourInput.addEventListener("input",(function(t){e.planetColour=i.Colour.fromHex(t.target.value)})),t.sunMassRangeInput.addEventListener("input",(function(n){e.sunMass=Math.pow(10,n.target.valueAsNumber),t.sunMassValue.innerText=e.sunMass.toPrecision(2)})),t.sunRadiusRangeInput.addEventListener("input",(function(n){e.sunRadius=n.target.valueAsNumber,t.sunRadiusValue.innerText=e.sunRadius.toString()})),t.sunColourInput.addEventListener("input",(function(t){e.sunColour=i.Colour.fromHex(t.target.value)})),t.displayGravityVisualisationInput.addEventListener("change",(function(t){e.displayGravityVisualisation=t.target.checked})),t.displayForceVectorInput.addEventListener("change",(function(t){e.displayForceVector=t.target.checked})),t.displayTrailInput.addEventListener("change",(function(t){e.displayTrail=t.target.checked}))}},614:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.GameObject=void 0;e.GameObject=function(t){Object.assign(this,t)}},213:function(t,e,n){var i=this&&this.__createBinding||(Object.create?function(t,e,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,i,o)}:function(t,e,n,i){void 0===i&&(i=n),t[i]=e[n]}),o=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||i(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),o(n(710),e)},710:function(t,e,n){var i,o=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Planet=void 0;var r=n(244),a=function(t){function e(e){var n=t.call(this,e)||this;return n.showTrail=!1,n.showForceVector=!1,n.trail=[],n.currentForce=new r.Vector(0,0),n.showTrail=e.showTrail,n.showForceVector=e.showForceVector,n}return o(e,t),e.prototype.update=function(t){this.currentForce=t.divide(this.mass).multiply(500),this.acceleration=t.divide(this.mass),this.updateTrail(),this.velocity=r.Vector.add(this.velocity,this.acceleration),this.position=r.Vector.add(this.position,this.velocity)},e.prototype.draw=function(){this.canvas.circle(this.position.x,this.position.y,this.radius,this.color.toHex()),this.drawTrail(),this.drawForceVector()},e.prototype.drawTrail=function(){var t=this;if(this.showTrail){var e=this.color.clone().setAlpha(.1);this.trail.forEach((function(n){t.canvas.circle(n.x,n.y,1,e.toHex())}))}},e.prototype.drawForceVector=function(){if(this.showForceVector){var t=this.color.clone().setAlpha(.5);this.canvas.line(this.position.x,this.position.y,this.position.x+this.currentForce.x,this.position.y+this.currentForce.y,t.toHex())}},e.prototype.updateTrail=function(){this.showTrail&&(this.trail.push(r.Vector.clone(this.position)),this.trail.length>50&&this.trail.shift())},e}(n(614).GameObject);e.Planet=a},562:function(t,e,n){var i,o=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Sun=void 0;var r=n(244),a=function(t){function e(e){return t.call(this,e)||this}return o(e,t),e.prototype.update=function(t){this.acceleration=t.divide(this.mass),this.velocity=r.Vector.add(this.velocity,this.acceleration),this.position=r.Vector.add(this.position,this.velocity)},e.prototype.draw=function(){this.canvas.circle(this.position.x,this.position.y,this.radius,this.color.toHex())},e}(n(614).GameObject);e.Sun=a},73:function(t,e,n){var i=this&&this.__createBinding||(Object.create?function(t,e,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,i,o)}:function(t,e,n,i){void 0===i&&(i=n),t[i]=e[n]}),o=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||i(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),o(n(193),e),o(n(244),e),o(n(213),e),o(n(48),e)},244:function(t,e,n){var i=this&&this.__createBinding||(Object.create?function(t,e,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,i,o)}:function(t,e,n,i){void 0===i&&(i=n),t[i]=e[n]}),o=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||i(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),o(n(589),e)},589:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.Vector=void 0;var n=function(){function t(t,e){"object"==typeof t?(this.x=t.x,this.y=t.y):(this.x=t,this.y=e)}return t.clone=function(e){return new t(e.x,e.y)},t.add=function(e,n){return new t(e.x+n.x,e.y+n.y)},t.subtract=function(e,n){return new t(e.x-n.x,e.y-n.y)},t.multiply=function(e,n){return new t(e.x*n,e.y*n)},t.divide=function(e,n){return new t(e.x/n,e.y/n)},t.dot=function(t,e){return t.x*e.x+t.y*e.y},t.magnitude=function(t){return Math.sqrt(t.x*t.x+t.y*t.y)},t.normalize=function(e){return t.divide(e,t.magnitude(e))},t.rotate=function(e,n){return new t(e.x*Math.cos(n)-e.y*Math.sin(n),e.x*Math.sin(n)+e.y*Math.cos(n))},t.rotateDeg=function(e,n){return t.rotate(e,n*Math.PI/180)},t.angle=function(t){return Math.atan2(t.y,t.x)},t.angleDeg=function(e){return 180*t.angle(e)/Math.PI},t.angleBetween=function(e,n){return t.dot(e,n)/(e.magnitude()*n.magnitude())},t.angleBetweenDeg=function(e,n){return 180*t.angleBetween(e,n)/Math.PI},t.prototype.add=function(e){return t.add(this,e)},t.prototype.subtract=function(e){return t.subtract(this,e)},t.prototype.multiply=function(e){return t.multiply(this,e)},t.prototype.divide=function(e){return t.divide(this,e)},t.prototype.dot=function(e){return t.dot(this,e)},t.prototype.magnitude=function(){return t.magnitude(this)},t.prototype.normalize=function(){return t.normalize(this)},t.prototype.rotate=function(e){return t.rotate(this,e)},t.prototype.rotateDeg=function(e){return t.rotateDeg(this,e)},t}();e.Vector=n}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={exports:{}};return t[i].call(r.exports,r,r.exports,n),r.exports}n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},function(){n(838);var t=n(73),e=n(961),i=new t.Canvas(document.getElementById("canvas"));i.setSize(window.innerWidth,window.innerHeight),window.addEventListener("resize",(function(){i.setSize(window.innerWidth,window.innerHeight)})),document.getElementById("game-settings").addEventListener("click",(function(t){t.stopPropagation(),t.stopImmediatePropagation()}));var o=new e.SettingsManager({planetMassRangeInput:document.getElementById("planet-mass"),planetMassValue:document.getElementById("planet-mass-value"),planetRadiusRangeInput:document.getElementById("planet-radius"),planetRadiusValue:document.getElementById("planet-radius-value"),planetColourInput:document.getElementById("planet-colour"),sunMassRangeInput:document.getElementById("sun-mass"),sunMassValue:document.getElementById("sun-mass-value"),sunRadiusRangeInput:document.getElementById("sun-radius"),sunRadiusValue:document.getElementById("sun-radius-value"),sunColourInput:document.getElementById("sun-colour"),displayGravityVisualisationInput:document.getElementById("display-gravity-visualisation"),displayForceVectorInput:document.getElementById("display-force-vector"),displayTrailInput:document.getElementById("display-trail")}),r=new t.Game(i,o);r.init(),r.run(),document.getElementById("clear-button").addEventListener("click",(function(){r.clear()}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQ0xxRyxTQUFTQyxlQUFlLGdCQUFnQmpJLGlCQUFpQixTQUFTLFdBQzlEdUksRUFBS25OLFciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90eXBlc2NyaXB0LXdlYnBhY2stdGVzdGluZy8uL3NyYy9wYWNrYWdlcy9jYW52YXMvY2FudmFzLnRzIiwid2VicGFjazovL3R5cGVzY3JpcHQtd2VicGFjay10ZXN0aW5nLy4vc3JjL3BhY2thZ2VzL2NhbnZhcy9pbmRleC50cyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0LXdlYnBhY2stdGVzdGluZy8uL3NyYy9wYWNrYWdlcy9jb2xvdXIvY29sb3VyLnRzIiwid2VicGFjazovL3R5cGVzY3JpcHQtd2VicGFjay10ZXN0aW5nLy4vc3JjL3BhY2thZ2VzL2NvbG91ci9pbmRleC50cyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0LXdlYnBhY2stdGVzdGluZy8uL3NyYy9wYWNrYWdlcy9nYW1lL2dhbWUudHMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC13ZWJwYWNrLXRlc3RpbmcvLi9zcmMvcGFja2FnZXMvZ2FtZS9pbmRleC50cyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0LXdlYnBhY2stdGVzdGluZy8uL3NyYy9wYWNrYWdlcy9nYW1lL3NldHRpbmdzLnRzIiwid2VicGFjazovL3R5cGVzY3JpcHQtd2VicGFjay10ZXN0aW5nLy4vc3JjL3BhY2thZ2VzL2dhbWVPYmplY3RzL2dhbWVPYmplY3QudHMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC13ZWJwYWNrLXRlc3RpbmcvLi9zcmMvcGFja2FnZXMvZ2FtZU9iamVjdHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC13ZWJwYWNrLXRlc3RpbmcvLi9zcmMvcGFja2FnZXMvZ2FtZU9iamVjdHMvcGxhbmV0LnRzIiwid2VicGFjazovL3R5cGVzY3JpcHQtd2VicGFjay10ZXN0aW5nLy4vc3JjL3BhY2thZ2VzL2dhbWVPYmplY3RzL3N1bi50cyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0LXdlYnBhY2stdGVzdGluZy8uL3NyYy9wYWNrYWdlcy9pbmRleC50cyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0LXdlYnBhY2stdGVzdGluZy8uL3NyYy9wYWNrYWdlcy92ZWN0b3IvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC13ZWJwYWNrLXRlc3RpbmcvLi9zcmMvcGFja2FnZXMvdmVjdG9yL3ZlY3Rvci50cyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0LXdlYnBhY2stdGVzdGluZy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90eXBlc2NyaXB0LXdlYnBhY2stdGVzdGluZy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3R5cGVzY3JpcHQtd2VicGFjay10ZXN0aW5nLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DYW52YXMgPSB2b2lkIDA7XG52YXIgQ2FudmFzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhbnZhcyhlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzAwMDAwMCcsXG4gICAgICAgICAgICBmaWxsQ29sb3I6ICcjZmZmZmZmJyxcbiAgICAgICAgICAgIHN0cm9rZUNvbG9yOiAnI2ZmZmZmZidcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbnZhcyBlbGVtZW50IGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdHggPSBlbGVtZW50LmdldENvbnRleHQoJzJkJyk7XG4gICAgfVxuICAgIENhbnZhcy5wcm90b3R5cGUuc2V0U2l6ZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmVsZW1lbnQuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIH07XG4gICAgQ2FudmFzLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jdHguc2F2ZSgpO1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbmZpZy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmVsZW1lbnQud2lkdGgsIHRoaXMuZWxlbWVudC5oZWlnaHQpO1xuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLmVsZW1lbnQud2lkdGgsIHRoaXMuZWxlbWVudC5oZWlnaHQpO1xuICAgICAgICB0aGlzLmN0eC5yZXN0b3JlKCk7XG4gICAgfTtcbiAgICBDYW52YXMucHJvdG90eXBlLmNpcmNsZSA9IGZ1bmN0aW9uICh4LCB5LCByYWRpdXMsIGZpbGxDb2xvdXIpIHtcbiAgICAgICAgaWYgKGZpbGxDb2xvdXIgPT09IHZvaWQgMCkgeyBmaWxsQ29sb3VyID0gdGhpcy5jb25maWcuZmlsbENvbG9yOyB9XG4gICAgICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gZmlsbENvbG91cjtcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIHRoaXMuY3R4LmFyYyh4LCB5LCByYWRpdXMsIDAsIE1hdGguUEkgKiAyKTtcbiAgICAgICAgdGhpcy5jdHguZmlsbCgpO1xuICAgICAgICB0aGlzLmN0eC5yZXN0b3JlKCk7XG4gICAgfTtcbiAgICBDYW52YXMucHJvdG90eXBlLmxpbmUgPSBmdW5jdGlvbiAoeDEsIHkxLCB4MiwgeTIsIHN0cm9rZUNvbG91cikge1xuICAgICAgICBpZiAoc3Ryb2tlQ29sb3VyID09PSB2b2lkIDApIHsgc3Ryb2tlQ29sb3VyID0gdGhpcy5jb25maWcuc3Ryb2tlQ29sb3I7IH1cbiAgICAgICAgdGhpcy5jdHguc2F2ZSgpO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IHN0cm9rZUNvbG91cjtcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIHRoaXMuY3R4Lm1vdmVUbyh4MSwgeTEpO1xuICAgICAgICB0aGlzLmN0eC5saW5lVG8oeDIsIHkyKTtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlKCk7XG4gICAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDYW52YXMucHJvdG90eXBlLCBcIndpZHRoXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LndpZHRoO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENhbnZhcy5wcm90b3R5cGUsIFwiaGVpZ2h0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmhlaWdodDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBDYW52YXM7XG59KCkpO1xuZXhwb3J0cy5DYW52YXMgPSBDYW52YXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NhbnZhc1wiKSwgZXhwb3J0cyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29sb3VyID0gdm9pZCAwO1xudmFyIENvbG91ciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb2xvdXIociwgZywgYiwgYSkge1xuICAgICAgICBpZiAoYSA9PT0gdm9pZCAwKSB7IGEgPSAxOyB9XG4gICAgICAgIHRoaXMuciA9IHI7XG4gICAgICAgIHRoaXMuZyA9IGc7XG4gICAgICAgIHRoaXMuYiA9IGI7XG4gICAgICAgIHRoaXMuYSA9IGE7XG4gICAgfVxuICAgIENvbG91ci5mcm9tSGV4ID0gZnVuY3Rpb24gKGhleCkge1xuICAgICAgICB2YXIgciA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcoMSwgMyksIDE2KTtcbiAgICAgICAgdmFyIGcgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDMsIDUpLCAxNik7XG4gICAgICAgIHZhciBiID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZyg1LCA3KSwgMTYpO1xuICAgICAgICByZXR1cm4gbmV3IENvbG91cihyLCBnLCBiKTtcbiAgICB9O1xuICAgIENvbG91ci5mcm9tUkdCID0gZnVuY3Rpb24gKHIsIGcsIGIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvdXIociwgZywgYik7XG4gICAgfTtcbiAgICBDb2xvdXIucHJvdG90eXBlLnRvSGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCIjXCIuY29uY2F0KHRoaXMuci50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuY29uY2F0KHRoaXMuZ1xuICAgICAgICAgICAgLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgLnBhZFN0YXJ0KDIsICcwJykpLmNvbmNhdCh0aGlzLmIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpO1xuICAgIH07XG4gICAgQ29sb3VyLnByb3RvdHlwZS50b1JHQiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwicmdiKFwiLmNvbmNhdCh0aGlzLnIsIFwiLCBcIikuY29uY2F0KHRoaXMuZywgXCIsIFwiKS5jb25jYXQodGhpcy5iLCBcIilcIik7XG4gICAgfTtcbiAgICBDb2xvdXIucHJvdG90eXBlLnRvUkdCQSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwicmdiYShcIi5jb25jYXQodGhpcy5yLCBcIiwgXCIpLmNvbmNhdCh0aGlzLmcsIFwiLCBcIikuY29uY2F0KHRoaXMuYiwgXCIsIFwiKS5jb25jYXQodGhpcy5hLCBcIilcIik7XG4gICAgfTtcbiAgICBDb2xvdXIucHJvdG90eXBlLnRvSGV4V2l0aEFscGhhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCIjXCIuY29uY2F0KHRoaXMuci50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuY29uY2F0KHRoaXMuZ1xuICAgICAgICAgICAgLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgLnBhZFN0YXJ0KDIsICcwJykpLmNvbmNhdCh0aGlzLmIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpLmNvbmNhdChNYXRoLnJvdW5kKHRoaXMuYSAqIDI1NSlcbiAgICAgICAgICAgIC50b1N0cmluZygxNilcbiAgICAgICAgICAgIC5wYWRTdGFydCgyLCAnMCcpKTtcbiAgICB9O1xuICAgIENvbG91ci5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3VyKHRoaXMuciwgdGhpcy5nLCB0aGlzLmIsIHRoaXMuYSk7XG4gICAgfTtcbiAgICBDb2xvdXIucHJvdG90eXBlLnNldEFscGhhID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdGhpcy5hID0gYTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gQ29sb3VyO1xufSgpKTtcbmV4cG9ydHMuQ29sb3VyID0gQ29sb3VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2xvdXJcIiksIGV4cG9ydHMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdhbWUgPSB2b2lkIDA7XG52YXIgY29sb3VyXzEgPSByZXF1aXJlKFwiLi4vY29sb3VyXCIpO1xudmFyIGdhbWVPYmplY3RzXzEgPSByZXF1aXJlKFwiLi4vZ2FtZU9iamVjdHNcIik7XG52YXIgc3VuXzEgPSByZXF1aXJlKFwiLi4vZ2FtZU9iamVjdHMvc3VuXCIpO1xudmFyIHZlY3Rvcl8xID0gcmVxdWlyZShcIi4uL3ZlY3RvclwiKTtcbnZhciBHYW1lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdhbWUoY2FudmFzLCBzZXR0aW5ncykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgICAgICB0aGlzLm9iamVjdHMgPSBbXTtcbiAgICAgICAgdGhpcy5HID0gNi42NzQwOGUtMTE7XG4gICAgICAgIHRoaXMuc2NhbGUgPSAxLjQ5NTk3ODcwN2U5O1xuICAgICAgICB0aGlzLmlzQ2xpY2tpbmcgPSBmYWxzZTtcbiAgICAgICAgY2FudmFzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIF90aGlzLmlzQ2xpY2tpbmcgPSB0cnVlO1xuICAgICAgICAgICAgX3RoaXMuY2xpY2tTdGFydCA9IHtcbiAgICAgICAgICAgICAgICB4OiBlLmNsaWVudFgsXG4gICAgICAgICAgICAgICAgeTogZS5jbGllbnRZXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgY2FudmFzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNDbGlja2luZykge1xuICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9iamVjdHMucHVzaChuZXcgc3VuXzEuU3VuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgdmVjdG9yXzEuVmVjdG9yKGUuY2xpZW50WCwgZS5jbGllbnRZKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5OiBuZXcgdmVjdG9yXzEuVmVjdG9yKDAsIDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjZWxlcmF0aW9uOiBuZXcgdmVjdG9yXzEuVmVjdG9yKDAsIDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzOiBfdGhpcy5jYW52YXMsXG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHNldHRpbmdzLnN1blJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc3M6IHNldHRpbmdzLnN1bk1hc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogc2V0dGluZ3Muc3VuQ29sb3VyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9iamVjdHMucHVzaChuZXcgZ2FtZU9iamVjdHNfMS5QbGFuZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IG5ldyB2ZWN0b3JfMS5WZWN0b3IoZS5jbGllbnRYLCBlLmNsaWVudFkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHk6IG5ldyB2ZWN0b3JfMS5WZWN0b3IoKGUuY2xpZW50WCAtIF90aGlzLmNsaWNrU3RhcnQueCkgLyAyMCwgKGUuY2xpZW50WSAtIF90aGlzLmNsaWNrU3RhcnQueSkgLyAyMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NlbGVyYXRpb246IG5ldyB2ZWN0b3JfMS5WZWN0b3IoMCwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXM6IF90aGlzLmNhbnZhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogc2V0dGluZ3MucGxhbmV0UmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFzczogc2V0dGluZ3MucGxhbmV0TWFzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBzZXR0aW5ncy5wbGFuZXRDb2xvdXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93VHJhaWw6IHNldHRpbmdzLmRpc3BsYXlUcmFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dGb3JjZVZlY3Rvcjogc2V0dGluZ3MuZGlzcGxheUZvcmNlVmVjdG9yXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNDbGlja2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgR2FtZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICBHYW1lLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY2FudmFzLmNsZWFyKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vYmplY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdHNbaV0uYWNjZWxlcmF0aW9uID0gbmV3IHZlY3Rvcl8xLlZlY3RvcigwLCAwKTtcbiAgICAgICAgICAgIHZhciBzdW1Gb3JjZSA9IG5ldyB2ZWN0b3JfMS5WZWN0b3IoMCwgMCk7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMub2JqZWN0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChpID09PSBqKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZm9yY2UgPSB0aGlzLmNhbGN1bGF0ZUZvcmNlKHRoaXMub2JqZWN0c1tpXSwgdGhpcy5vYmplY3RzW2pdKTtcbiAgICAgICAgICAgICAgICBzdW1Gb3JjZSA9IHZlY3Rvcl8xLlZlY3Rvci5hZGQoc3VtRm9yY2UsIGZvcmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub2JqZWN0c1tpXS51cGRhdGUoc3VtRm9yY2UpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tPdXRPZkJvdW5kcyh0aGlzLm9iamVjdHNbaV0pKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm9iamVjdHNbaV0uZHJhdygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHJhd0dyYXZpdHlWaXN1YWxpc2F0aW9uKCk7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucnVuKCk7IH0pO1xuICAgIH07XG4gICAgR2FtZS5wcm90b3R5cGUuY2FsY3VsYXRlRm9yY2UgPSBmdW5jdGlvbiAocGxhbmV0LCBvdGhlcikge1xuICAgICAgICB2YXIgciA9IHZlY3Rvcl8xLlZlY3Rvci5zdWJ0cmFjdChwbGFuZXQucG9zaXRpb24sIG90aGVyLnBvc2l0aW9uKTtcbiAgICAgICAgdmFyIHJNYWcgPSB2ZWN0b3JfMS5WZWN0b3IubWFnbml0dWRlKHIpICogdGhpcy5zY2FsZTtcbiAgICAgICAgdmFyIGZvcmNlID0gdmVjdG9yXzEuVmVjdG9yLm11bHRpcGx5KHIsICh0aGlzLkcgKiBwbGFuZXQubWFzcyAqIG90aGVyLm1hc3MpIC8gKHJNYWcgKiByTWFnKSkubXVsdGlwbHkoLTEpO1xuICAgICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBHYW1lLnByb3RvdHlwZS5jaGVja091dE9mQm91bmRzID0gZnVuY3Rpb24gKHBsYW5ldCkge1xuICAgICAgICBpZiAocGxhbmV0LnBvc2l0aW9uLnggPCAwIHx8XG4gICAgICAgICAgICBwbGFuZXQucG9zaXRpb24ueCA+IHRoaXMuY2FudmFzLndpZHRoIHx8XG4gICAgICAgICAgICBwbGFuZXQucG9zaXRpb24ueSA8IDAgfHxcbiAgICAgICAgICAgIHBsYW5ldC5wb3NpdGlvbi55ID4gdGhpcy5jYW52YXMuaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdHMuc3BsaWNlKHRoaXMub2JqZWN0cy5pbmRleE9mKHBsYW5ldCksIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgR2FtZS5wcm90b3R5cGUuZHJhd0dyYXZpdHlWaXN1YWxpc2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuZGlzcGxheUdyYXZpdHlWaXN1YWxpc2F0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hID0gdGhpcy5jYW52YXMsIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPD0gd2lkdGg7IHggKz0gMjApIHtcbiAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDw9IGhlaWdodDsgeSArPSAyMCkge1xuICAgICAgICAgICAgICAgIHZhciB0b3RhbEZvcmNlID0gbmV3IHZlY3Rvcl8xLlZlY3RvcigwLCAwKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub2JqZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm9yY2UgPSB0aGlzLmNhbGN1bGF0ZUZvcmNlKHRoaXMub2JqZWN0c1tpXSwgbmV3IGdhbWVPYmplY3RzXzEuUGxhbmV0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgdmVjdG9yXzEuVmVjdG9yKHgsIHkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHk6IG5ldyB2ZWN0b3JfMS5WZWN0b3IoMCwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NlbGVyYXRpb246IG5ldyB2ZWN0b3JfMS5WZWN0b3IoMCwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXM6IHRoaXMuY2FudmFzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFzczogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBuZXcgY29sb3VyXzEuQ29sb3VyKDAsIDAsIDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1RyYWlsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dGb3JjZVZlY3RvcjogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB0b3RhbEZvcmNlID0gdmVjdG9yXzEuVmVjdG9yLmFkZCh0b3RhbEZvcmNlLCBmb3JjZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0b3RhbEZvcmNlLm1hZ25pdHVkZSgpID4gMWUtNCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5jaXJjbGUoeCwgeSwgTWF0aC5taW4oTWF0aC5jZWlsKHZlY3Rvcl8xLlZlY3Rvci5tYWduaXR1ZGUodG90YWxGb3JjZSkgKiAxMDAwMCkgLyAxMDAwMCwgNSksICdyZ2JhKDI1NSwyNTUsMjU1LDAuNSknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEdhbWUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9iamVjdHMgPSBbXTtcbiAgICB9O1xuICAgIHJldHVybiBHYW1lO1xufSgpKTtcbmV4cG9ydHMuR2FtZSA9IEdhbWU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2dhbWVcIiksIGV4cG9ydHMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNldHRpbmdzTWFuYWdlciA9IHZvaWQgMDtcbnZhciBjb2xvdXJfMSA9IHJlcXVpcmUoXCIuLi9jb2xvdXJcIik7XG52YXIgU2V0dGluZ3NNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNldHRpbmdzTWFuYWdlcihlbGVtZW50cykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnBsYW5ldE1hc3MgPSAxZTI0O1xuICAgICAgICB0aGlzLnBsYW5ldFJhZGl1cyA9IDEwO1xuICAgICAgICB0aGlzLnBsYW5ldENvbG91ciA9IG5ldyBjb2xvdXJfMS5Db2xvdXIoMjU1LCAwLCAwKTtcbiAgICAgICAgdGhpcy5zdW5NYXNzID0gMWUzMDtcbiAgICAgICAgdGhpcy5zdW5SYWRpdXMgPSA0MDtcbiAgICAgICAgdGhpcy5zdW5Db2xvdXIgPSBuZXcgY29sb3VyXzEuQ29sb3VyKDI1NSwgMjU1LCAwKTtcbiAgICAgICAgdGhpcy5kaXNwbGF5R3Jhdml0eVZpc3VhbGlzYXRpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kaXNwbGF5Rm9yY2VWZWN0b3IgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kaXNwbGF5VHJhaWwgPSBmYWxzZTtcbiAgICAgICAgZWxlbWVudHMucGxhbmV0TWFzc1JhbmdlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICBfdGhpcy5wbGFuZXRNYXNzID1cbiAgICAgICAgICAgICAgICBNYXRoLnBvdygxMCwgJGV2ZW50LnRhcmdldC52YWx1ZUFzTnVtYmVyKTtcbiAgICAgICAgICAgIGVsZW1lbnRzLnBsYW5ldE1hc3NWYWx1ZS5pbm5lclRleHQgPSBfdGhpcy5wbGFuZXRNYXNzLnRvUHJlY2lzaW9uKDIpO1xuICAgICAgICB9KTtcbiAgICAgICAgZWxlbWVudHMucGxhbmV0UmFkaXVzUmFuZ2VJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgIF90aGlzLnBsYW5ldFJhZGl1cyA9ICRldmVudC50YXJnZXQudmFsdWVBc051bWJlcjtcbiAgICAgICAgICAgIGVsZW1lbnRzLnBsYW5ldFJhZGl1c1ZhbHVlLmlubmVyVGV4dCA9IF90aGlzLnBsYW5ldFJhZGl1cy50b1N0cmluZygpO1xuICAgICAgICB9KTtcbiAgICAgICAgZWxlbWVudHMucGxhbmV0Q29sb3VySW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICBfdGhpcy5wbGFuZXRDb2xvdXIgPSBjb2xvdXJfMS5Db2xvdXIuZnJvbUhleCgkZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVsZW1lbnRzLnN1bk1hc3NSYW5nZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgX3RoaXMuc3VuTWFzcyA9IE1hdGgucG93KDEwLCAkZXZlbnQudGFyZ2V0LnZhbHVlQXNOdW1iZXIpO1xuICAgICAgICAgICAgZWxlbWVudHMuc3VuTWFzc1ZhbHVlLmlubmVyVGV4dCA9IF90aGlzLnN1bk1hc3MudG9QcmVjaXNpb24oMik7XG4gICAgICAgIH0pO1xuICAgICAgICBlbGVtZW50cy5zdW5SYWRpdXNSYW5nZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgX3RoaXMuc3VuUmFkaXVzID0gJGV2ZW50LnRhcmdldC52YWx1ZUFzTnVtYmVyO1xuICAgICAgICAgICAgZWxlbWVudHMuc3VuUmFkaXVzVmFsdWUuaW5uZXJUZXh0ID0gX3RoaXMuc3VuUmFkaXVzLnRvU3RyaW5nKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBlbGVtZW50cy5zdW5Db2xvdXJJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgIF90aGlzLnN1bkNvbG91ciA9IGNvbG91cl8xLkNvbG91ci5mcm9tSGV4KCRldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgZWxlbWVudHMuZGlzcGxheUdyYXZpdHlWaXN1YWxpc2F0aW9uSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgX3RoaXMuZGlzcGxheUdyYXZpdHlWaXN1YWxpc2F0aW9uID0gJGV2ZW50LnRhcmdldC5jaGVja2VkO1xuICAgICAgICB9KTtcbiAgICAgICAgZWxlbWVudHMuZGlzcGxheUZvcmNlVmVjdG9ySW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgX3RoaXMuZGlzcGxheUZvcmNlVmVjdG9yID0gJGV2ZW50LnRhcmdldC5jaGVja2VkO1xuICAgICAgICB9KTtcbiAgICAgICAgZWxlbWVudHMuZGlzcGxheVRyYWlsSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgX3RoaXMuZGlzcGxheVRyYWlsID0gJGV2ZW50LnRhcmdldC5jaGVja2VkO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIFNldHRpbmdzTWFuYWdlcjtcbn0oKSk7XG5leHBvcnRzLlNldHRpbmdzTWFuYWdlciA9IFNldHRpbmdzTWFuYWdlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HYW1lT2JqZWN0ID0gdm9pZCAwO1xudmFyIEdhbWVPYmplY3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gR2FtZU9iamVjdChjb25maWcpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjb25maWcpO1xuICAgIH1cbiAgICByZXR1cm4gR2FtZU9iamVjdDtcbn0oKSk7XG5leHBvcnRzLkdhbWVPYmplY3QgPSBHYW1lT2JqZWN0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wbGFuZXRcIiksIGV4cG9ydHMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QbGFuZXQgPSB2b2lkIDA7XG52YXIgdmVjdG9yXzEgPSByZXF1aXJlKFwiLi4vdmVjdG9yXCIpO1xudmFyIGdhbWVPYmplY3RfMSA9IHJlcXVpcmUoXCIuL2dhbWVPYmplY3RcIik7XG52YXIgUGxhbmV0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQbGFuZXQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUGxhbmV0KGNvbmZpZykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb25maWcpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNob3dUcmFpbCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5zaG93Rm9yY2VWZWN0b3IgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMudHJhaWwgPSBbXTtcbiAgICAgICAgX3RoaXMuY3VycmVudEZvcmNlID0gbmV3IHZlY3Rvcl8xLlZlY3RvcigwLCAwKTtcbiAgICAgICAgX3RoaXMuc2hvd1RyYWlsID0gY29uZmlnLnNob3dUcmFpbDtcbiAgICAgICAgX3RoaXMuc2hvd0ZvcmNlVmVjdG9yID0gY29uZmlnLnNob3dGb3JjZVZlY3RvcjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBQbGFuZXQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChmb3JjZSkge1xuICAgICAgICAvLyBGID0gbWEgLy8gYSA9IEYvbVxuICAgICAgICB0aGlzLmN1cnJlbnRGb3JjZSA9IGZvcmNlLmRpdmlkZSh0aGlzLm1hc3MpLm11bHRpcGx5KDUwMCk7XG4gICAgICAgIHRoaXMuYWNjZWxlcmF0aW9uID0gZm9yY2UuZGl2aWRlKHRoaXMubWFzcyk7XG4gICAgICAgIHRoaXMudXBkYXRlVHJhaWwoKTtcbiAgICAgICAgdGhpcy52ZWxvY2l0eSA9IHZlY3Rvcl8xLlZlY3Rvci5hZGQodGhpcy52ZWxvY2l0eSwgdGhpcy5hY2NlbGVyYXRpb24pO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gdmVjdG9yXzEuVmVjdG9yLmFkZCh0aGlzLnBvc2l0aW9uLCB0aGlzLnZlbG9jaXR5KTtcbiAgICB9O1xuICAgIFBsYW5ldC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jYW52YXMuY2lyY2xlKHRoaXMucG9zaXRpb24ueCwgdGhpcy5wb3NpdGlvbi55LCB0aGlzLnJhZGl1cywgdGhpcy5jb2xvci50b0hleCgpKTtcbiAgICAgICAgdGhpcy5kcmF3VHJhaWwoKTtcbiAgICAgICAgdGhpcy5kcmF3Rm9yY2VWZWN0b3IoKTtcbiAgICB9O1xuICAgIFBsYW5ldC5wcm90b3R5cGUuZHJhd1RyYWlsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuc2hvd1RyYWlsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRyYWlsQ29sb3IgPSB0aGlzLmNvbG9yLmNsb25lKCkuc2V0QWxwaGEoMC4xKTtcbiAgICAgICAgdGhpcy50cmFpbC5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICBfdGhpcy5jYW52YXMuY2lyY2xlKHYueCwgdi55LCAxLCB0cmFpbENvbG9yLnRvSGV4KCkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFBsYW5ldC5wcm90b3R5cGUuZHJhd0ZvcmNlVmVjdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuc2hvd0ZvcmNlVmVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZvcmNlQ29sb3IgPSB0aGlzLmNvbG9yLmNsb25lKCkuc2V0QWxwaGEoMC41KTtcbiAgICAgICAgdGhpcy5jYW52YXMubGluZSh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSwgdGhpcy5wb3NpdGlvbi54ICsgdGhpcy5jdXJyZW50Rm9yY2UueCwgdGhpcy5wb3NpdGlvbi55ICsgdGhpcy5jdXJyZW50Rm9yY2UueSwgZm9yY2VDb2xvci50b0hleCgpKTtcbiAgICB9O1xuICAgIFBsYW5ldC5wcm90b3R5cGUudXBkYXRlVHJhaWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnNob3dUcmFpbCkge1xuICAgICAgICAgICAgdGhpcy50cmFpbC5wdXNoKHZlY3Rvcl8xLlZlY3Rvci5jbG9uZSh0aGlzLnBvc2l0aW9uKSk7XG4gICAgICAgICAgICBpZiAodGhpcy50cmFpbC5sZW5ndGggPiA1MCkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJhaWwuc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFBsYW5ldDtcbn0oZ2FtZU9iamVjdF8xLkdhbWVPYmplY3QpKTtcbmV4cG9ydHMuUGxhbmV0ID0gUGxhbmV0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdW4gPSB2b2lkIDA7XG52YXIgdmVjdG9yXzEgPSByZXF1aXJlKFwiLi4vdmVjdG9yXCIpO1xudmFyIGdhbWVPYmplY3RfMSA9IHJlcXVpcmUoXCIuL2dhbWVPYmplY3RcIik7XG52YXIgU3VuID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdW4sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3VuKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgY29uZmlnKSB8fCB0aGlzO1xuICAgIH1cbiAgICBTdW4ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChmb3JjZSkge1xuICAgICAgICB0aGlzLmFjY2VsZXJhdGlvbiA9IGZvcmNlLmRpdmlkZSh0aGlzLm1hc3MpO1xuICAgICAgICB0aGlzLnZlbG9jaXR5ID0gdmVjdG9yXzEuVmVjdG9yLmFkZCh0aGlzLnZlbG9jaXR5LCB0aGlzLmFjY2VsZXJhdGlvbik7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB2ZWN0b3JfMS5WZWN0b3IuYWRkKHRoaXMucG9zaXRpb24sIHRoaXMudmVsb2NpdHkpO1xuICAgIH07XG4gICAgU3VuLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNhbnZhcy5jaXJjbGUodGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnksIHRoaXMucmFkaXVzLCB0aGlzLmNvbG9yLnRvSGV4KCkpO1xuICAgIH07XG4gICAgcmV0dXJuIFN1bjtcbn0oZ2FtZU9iamVjdF8xLkdhbWVPYmplY3QpKTtcbmV4cG9ydHMuU3VuID0gU3VuO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jYW52YXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3ZlY3RvclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZ2FtZU9iamVjdHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2dhbWVcIiksIGV4cG9ydHMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi92ZWN0b3JcIiksIGV4cG9ydHMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZlY3RvciA9IHZvaWQgMDtcbnZhciBWZWN0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmVjdG9yKHgsIHkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB4ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhpcy54ID0geC54O1xuICAgICAgICAgICAgdGhpcy55ID0geC55O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVmVjdG9yLmNsb25lID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3Iodi54LCB2LnkpO1xuICAgIH07XG4gICAgVmVjdG9yLmFkZCA9IGZ1bmN0aW9uICh2MSwgdjIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IodjEueCArIHYyLngsIHYxLnkgKyB2Mi55KTtcbiAgICB9O1xuICAgIFZlY3Rvci5zdWJ0cmFjdCA9IGZ1bmN0aW9uICh2MSwgdjIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IodjEueCAtIHYyLngsIHYxLnkgLSB2Mi55KTtcbiAgICB9O1xuICAgIFZlY3Rvci5tdWx0aXBseSA9IGZ1bmN0aW9uICh2LCBuKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yKHYueCAqIG4sIHYueSAqIG4pO1xuICAgIH07XG4gICAgVmVjdG9yLmRpdmlkZSA9IGZ1bmN0aW9uICh2LCBuKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yKHYueCAvIG4sIHYueSAvIG4pO1xuICAgIH07XG4gICAgVmVjdG9yLmRvdCA9IGZ1bmN0aW9uICh2MSwgdjIpIHtcbiAgICAgICAgcmV0dXJuIHYxLnggKiB2Mi54ICsgdjEueSAqIHYyLnk7XG4gICAgfTtcbiAgICBWZWN0b3IubWFnbml0dWRlID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh2LnggKiB2LnggKyB2LnkgKiB2LnkpO1xuICAgIH07XG4gICAgVmVjdG9yLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJldHVybiBWZWN0b3IuZGl2aWRlKHYsIFZlY3Rvci5tYWduaXR1ZGUodikpO1xuICAgIH07XG4gICAgVmVjdG9yLnJvdGF0ZSA9IGZ1bmN0aW9uICh2LCByYWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3Iodi54ICogTWF0aC5jb3MocmFkKSAtIHYueSAqIE1hdGguc2luKHJhZCksIHYueCAqIE1hdGguc2luKHJhZCkgKyB2LnkgKiBNYXRoLmNvcyhyYWQpKTtcbiAgICB9O1xuICAgIFZlY3Rvci5yb3RhdGVEZWcgPSBmdW5jdGlvbiAodiwgZGVnKSB7XG4gICAgICAgIHJldHVybiBWZWN0b3Iucm90YXRlKHYsIChkZWcgKiBNYXRoLlBJKSAvIDE4MCk7XG4gICAgfTtcbiAgICBWZWN0b3IuYW5nbGUgPSBmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gTWF0aC5hdGFuMih2LnksIHYueCk7XG4gICAgfTtcbiAgICBWZWN0b3IuYW5nbGVEZWcgPSBmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gKFZlY3Rvci5hbmdsZSh2KSAqIDE4MCkgLyBNYXRoLlBJO1xuICAgIH07XG4gICAgVmVjdG9yLmFuZ2xlQmV0d2VlbiA9IGZ1bmN0aW9uICh2MSwgdjIpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5kb3QodjEsIHYyKSAvICh2MS5tYWduaXR1ZGUoKSAqIHYyLm1hZ25pdHVkZSgpKTtcbiAgICB9O1xuICAgIFZlY3Rvci5hbmdsZUJldHdlZW5EZWcgPSBmdW5jdGlvbiAodjEsIHYyKSB7XG4gICAgICAgIHJldHVybiAoVmVjdG9yLmFuZ2xlQmV0d2Vlbih2MSwgdjIpICogMTgwKSAvIE1hdGguUEk7XG4gICAgfTtcbiAgICBWZWN0b3IucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJldHVybiBWZWN0b3IuYWRkKHRoaXMsIHYpO1xuICAgIH07XG4gICAgVmVjdG9yLnByb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJldHVybiBWZWN0b3Iuc3VidHJhY3QodGhpcywgdik7XG4gICAgfTtcbiAgICBWZWN0b3IucHJvdG90eXBlLm11bHRpcGx5ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5tdWx0aXBseSh0aGlzLCBuKTtcbiAgICB9O1xuICAgIFZlY3Rvci5wcm90b3R5cGUuZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5kaXZpZGUodGhpcywgbik7XG4gICAgfTtcbiAgICBWZWN0b3IucHJvdG90eXBlLmRvdCA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJldHVybiBWZWN0b3IuZG90KHRoaXMsIHYpO1xuICAgIH07XG4gICAgVmVjdG9yLnByb3RvdHlwZS5tYWduaXR1ZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBWZWN0b3IubWFnbml0dWRlKHRoaXMpO1xuICAgIH07XG4gICAgVmVjdG9yLnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBWZWN0b3Iubm9ybWFsaXplKHRoaXMpO1xuICAgIH07XG4gICAgVmVjdG9yLnByb3RvdHlwZS5yb3RhdGUgPSBmdW5jdGlvbiAocmFkKSB7XG4gICAgICAgIHJldHVybiBWZWN0b3Iucm90YXRlKHRoaXMsIHJhZCk7XG4gICAgfTtcbiAgICBWZWN0b3IucHJvdG90eXBlLnJvdGF0ZURlZyA9IGZ1bmN0aW9uIChkZWcpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5yb3RhdGVEZWcodGhpcywgZGVnKTtcbiAgICB9O1xuICAgIHJldHVybiBWZWN0b3I7XG59KCkpO1xuZXhwb3J0cy5WZWN0b3IgPSBWZWN0b3I7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnJlcXVpcmUoXCIuL3N0eWxlcy9zdHlsZXMuc2Nzc1wiKTtcbnZhciBwYWNrYWdlc18xID0gcmVxdWlyZShcIi4vcGFja2FnZXNcIik7XG52YXIgc2V0dGluZ3NfMSA9IHJlcXVpcmUoXCIuL3BhY2thZ2VzL2dhbWUvc2V0dGluZ3NcIik7XG52YXIgY3ZzID0gbmV3IHBhY2thZ2VzXzEuQ2FudmFzKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKSk7XG5jdnMuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbiAoKSB7XG4gICAgY3ZzLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG59KTtcbmRvY3VtZW50XG4gICAgLmdldEVsZW1lbnRCeUlkKCdnYW1lLXNldHRpbmdzJylcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn0pO1xudmFyIHNldHRpbmdzTWFuYWdlciA9IG5ldyBzZXR0aW5nc18xLlNldHRpbmdzTWFuYWdlcih7XG4gICAgcGxhbmV0TWFzc1JhbmdlSW5wdXQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGFuZXQtbWFzcycpLFxuICAgIHBsYW5ldE1hc3NWYWx1ZTogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYW5ldC1tYXNzLXZhbHVlJyksXG4gICAgcGxhbmV0UmFkaXVzUmFuZ2VJbnB1dDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYW5ldC1yYWRpdXMnKSxcbiAgICBwbGFuZXRSYWRpdXNWYWx1ZTogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYW5ldC1yYWRpdXMtdmFsdWUnKSxcbiAgICBwbGFuZXRDb2xvdXJJbnB1dDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYW5ldC1jb2xvdXInKSxcbiAgICBzdW5NYXNzUmFuZ2VJbnB1dDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N1bi1tYXNzJyksXG4gICAgc3VuTWFzc1ZhbHVlOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VuLW1hc3MtdmFsdWUnKSxcbiAgICBzdW5SYWRpdXNSYW5nZUlucHV0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VuLXJhZGl1cycpLFxuICAgIHN1blJhZGl1c1ZhbHVlOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VuLXJhZGl1cy12YWx1ZScpLFxuICAgIHN1bkNvbG91cklucHV0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VuLWNvbG91cicpLFxuICAgIGRpc3BsYXlHcmF2aXR5VmlzdWFsaXNhdGlvbklucHV0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGlzcGxheS1ncmF2aXR5LXZpc3VhbGlzYXRpb24nKSxcbiAgICBkaXNwbGF5Rm9yY2VWZWN0b3JJbnB1dDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rpc3BsYXktZm9yY2UtdmVjdG9yJyksXG4gICAgZGlzcGxheVRyYWlsSW5wdXQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaXNwbGF5LXRyYWlsJylcbn0pO1xudmFyIGdhbWUgPSBuZXcgcGFja2FnZXNfMS5HYW1lKGN2cywgc2V0dGluZ3NNYW5hZ2VyKTtcbmdhbWUuaW5pdCgpO1xuZ2FtZS5ydW4oKTtcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjbGVhci1idXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmNsZWFyKCk7XG59KTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkNhbnZhcyIsImVsZW1lbnQiLCJ0aGlzIiwiY29uZmlnIiwiYmFja2dyb3VuZENvbG9yIiwiZmlsbENvbG9yIiwic3Ryb2tlQ29sb3IiLCJFcnJvciIsImN0eCIsImdldENvbnRleHQiLCJwcm90b3R5cGUiLCJzZXRTaXplIiwid2lkdGgiLCJoZWlnaHQiLCJjbGVhciIsInNhdmUiLCJmaWxsU3R5bGUiLCJjbGVhclJlY3QiLCJmaWxsUmVjdCIsInJlc3RvcmUiLCJjaXJjbGUiLCJ4IiwieSIsInJhZGl1cyIsImZpbGxDb2xvdXIiLCJiZWdpblBhdGgiLCJhcmMiLCJNYXRoIiwiUEkiLCJmaWxsIiwibGluZSIsIngxIiwieTEiLCJ4MiIsInkyIiwic3Ryb2tlQ29sb3VyIiwic3Ryb2tlU3R5bGUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2UiLCJnZXQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiX19jcmVhdGVCaW5kaW5nIiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiX19leHBvcnRTdGFyIiwicCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIkNvbG91ciIsInIiLCJnIiwiYiIsImEiLCJmcm9tSGV4IiwiaGV4IiwicGFyc2VJbnQiLCJzdWJzdHJpbmciLCJmcm9tUkdCIiwidG9IZXgiLCJjb25jYXQiLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwidG9SR0IiLCJ0b1JHQkEiLCJ0b0hleFdpdGhBbHBoYSIsInJvdW5kIiwiY2xvbmUiLCJzZXRBbHBoYSIsIkdhbWUiLCJjb2xvdXJfMSIsImdhbWVPYmplY3RzXzEiLCJzdW5fMSIsInZlY3Rvcl8xIiwiY2FudmFzIiwic2V0dGluZ3MiLCJfdGhpcyIsIm9iamVjdHMiLCJHIiwic2NhbGUiLCJpc0NsaWNraW5nIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJjbGlja1N0YXJ0IiwiY2xpZW50WCIsImNsaWVudFkiLCJjdHJsS2V5IiwibWV0YUtleSIsInB1c2giLCJTdW4iLCJwb3NpdGlvbiIsIlZlY3RvciIsInZlbG9jaXR5IiwiYWNjZWxlcmF0aW9uIiwic3VuUmFkaXVzIiwibWFzcyIsInN1bk1hc3MiLCJjb2xvciIsInN1bkNvbG91ciIsIlBsYW5ldCIsInBsYW5ldFJhZGl1cyIsInBsYW5ldE1hc3MiLCJwbGFuZXRDb2xvdXIiLCJzaG93VHJhaWwiLCJkaXNwbGF5VHJhaWwiLCJzaG93Rm9yY2VWZWN0b3IiLCJkaXNwbGF5Rm9yY2VWZWN0b3IiLCJpbml0IiwicnVuIiwiaSIsImxlbmd0aCIsInN1bUZvcmNlIiwiaiIsImZvcmNlIiwiY2FsY3VsYXRlRm9yY2UiLCJhZGQiLCJ1cGRhdGUiLCJjaGVja091dE9mQm91bmRzIiwiZHJhdyIsImRyYXdHcmF2aXR5VmlzdWFsaXNhdGlvbiIsIndpbmRvdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInBsYW5ldCIsIm90aGVyIiwic3VidHJhY3QiLCJyTWFnIiwibWFnbml0dWRlIiwibXVsdGlwbHkiLCJzcGxpY2UiLCJpbmRleE9mIiwiZGlzcGxheUdyYXZpdHlWaXN1YWxpc2F0aW9uIiwiX2EiLCJ0b3RhbEZvcmNlIiwibWluIiwiY2VpbCIsIlNldHRpbmdzTWFuYWdlciIsImVsZW1lbnRzIiwicGxhbmV0TWFzc1JhbmdlSW5wdXQiLCIkZXZlbnQiLCJwb3ciLCJ0YXJnZXQiLCJ2YWx1ZUFzTnVtYmVyIiwicGxhbmV0TWFzc1ZhbHVlIiwiaW5uZXJUZXh0IiwidG9QcmVjaXNpb24iLCJwbGFuZXRSYWRpdXNSYW5nZUlucHV0IiwicGxhbmV0UmFkaXVzVmFsdWUiLCJwbGFuZXRDb2xvdXJJbnB1dCIsInN1bk1hc3NSYW5nZUlucHV0Iiwic3VuTWFzc1ZhbHVlIiwic3VuUmFkaXVzUmFuZ2VJbnB1dCIsInN1blJhZGl1c1ZhbHVlIiwic3VuQ29sb3VySW5wdXQiLCJkaXNwbGF5R3Jhdml0eVZpc3VhbGlzYXRpb25JbnB1dCIsImNoZWNrZWQiLCJkaXNwbGF5Rm9yY2VWZWN0b3JJbnB1dCIsImRpc3BsYXlUcmFpbElucHV0IiwiR2FtZU9iamVjdCIsImFzc2lnbiIsImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJkIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl9fIiwiY29uc3RydWN0b3IiLCJfc3VwZXIiLCJ0cmFpbCIsImN1cnJlbnRGb3JjZSIsImRpdmlkZSIsInVwZGF0ZVRyYWlsIiwiZHJhd1RyYWlsIiwiZHJhd0ZvcmNlVmVjdG9yIiwidHJhaWxDb2xvciIsImZvckVhY2giLCJ2IiwiZm9yY2VDb2xvciIsInNoaWZ0IiwidjEiLCJ2MiIsIm4iLCJkb3QiLCJzcXJ0Iiwibm9ybWFsaXplIiwicm90YXRlIiwicmFkIiwiY29zIiwic2luIiwicm90YXRlRGVnIiwiZGVnIiwiYW5nbGUiLCJhdGFuMiIsImFuZ2xlRGVnIiwiYW5nbGVCZXR3ZWVuIiwiYW5nbGVCZXR3ZWVuRGVnIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwicGFja2FnZXNfMSIsInNldHRpbmdzXzEiLCJjdnMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwic2V0dGluZ3NNYW5hZ2VyIiwiZ2FtZSJdLCJzb3VyY2VSb290IjoiIn0=